package utils_crypto

import (
	"math"
	"strings"
)

func EncryptBasic(text string) string {
	text = strings.ReplaceAll(text, ".", "\\fgfgff55555")
	text = strings.ReplaceAll(text, "-", "\\555ffgfgfff")
	text = strings.ReplaceAll(text, "_", "\\55ffgff5f55")

	encrypted := []rune{}
	shift := getShift(1, 5, 4, 9)

	for _, char := range text {
		newChar := rune(int32(char) + int32(shift))
		encrypted = append(encrypted, rotate(int(newChar), false))
		shift++
	}

	return permute(string(encrypted))
}

func DecryptBasic(text string) string {
	decrypted := []rune{}
	shift := getShift(1, 5, 4, 9)

	for _, char := range permute(text) {
		newChar := rune(rotate(int(char), true))
		newChar -= rune(shift)

		decrypted = append(decrypted, newChar)
		shift++
	}

	decryptedStr := string(decrypted)

	decryptedStr = strings.ReplaceAll(decryptedStr, "\\fgfgff55555", ".")
	decryptedStr = strings.ReplaceAll(decryptedStr, "\\555ffgfgfff", "-")
	decryptedStr = strings.ReplaceAll(decryptedStr, "\\55ffgff5f55", "_")

	return decryptedStr
}

func permute(Œó string) string {
	·éª := []rune(Œó)
	‚≤é := getShift(5, 0, 2, 1)

	for Ôº® := 0; Ôº® < len(·éª); Ôº® += ‚≤é {
		ùëØ := min(Ôº®+‚≤é, len(·éª))

		for –ù, ‚Ñç := Ôº®, ùëØ-1; –ù < ‚Ñç; –ù, ‚Ñç = –ù+1, ‚Ñç-1 {
			·éª[–ù], ·éª[‚Ñç] = ·éª[‚Ñç], ·éª[–ù]
		}
	}

	return string(·éª)
}

func rotate(‚≥ê int, Ôº¨ bool) int32 {
	var ·èû int

	if Ôº¨ {
		ùñ´ := ‚≥ê & 0x00FF
		ùóü := (‚≥ê >> 8) & 0x00FF
		·èû = (ùñ´ << 8) | ùóü
		·èû = (·èû - 328 + 0x10FFFF) % 0x10FFFF
		·èû ^= 0x5A5A
	} else {
		·èû = ‚≥ê ^ 0x5A5A
		·èû = (·èû + 328) % 0x10FFFF
		ùñ´ := ·èû & 0x00FF
		ùóü := (·èû >> 8) & 0x00FF
		·èû = (ùñ´ << 8) | ùóü
	}

	return int32(·èû)
}

func getShift(Œ° int, –† int, ‚≤¢ int, Ôº∞ int) int {
	ùêè := (Œ°) + (‚≤¢+‚≤¢)*getCom(‚≤¢+Ôº∞, Œ°)
	ùë∑ := ‚≤¢ * Ôº∞ * –† * int(math.Cos(float64(‚≤¢+Ôº∞))) * 92
	ùñØ := getFac(–†) + getFac(‚≤¢) + getFac(Œ°) + 3
	ùó£ := (Ôº∞ * Ôº∞) + int(math.Log2(float64(ùë∑))*10)
	ùòó := int(math.Sin(float64(–†+Œ°)))*Œ° - ùë∑
	ùôã := Œ°*getCom(Œ°+–†, ‚≤¢) + getFac(Ôº∞) + ùêè
	ùôø := int(math.Erfcinv(float64(ùêè-‚≤¢))) - 9
	ùöô := (Œ°*4 + int(math.Asin(float64(ùòó))) + int(ùòó))

	return (ùó£ * 2) + int((float32(ùôã)/10)+(float32(ùñØ)))/int(math.Trunc(4)) - ùó£ + (ùôø - ùöô) + –†
}

func getFac(·èÄ int) int {
	if ·èÄ <= 1 {
		return 1
	}

	return ·èÄ * getFac(·èÄ-1)
}

func getCom(·ñ¥ int, Ôº¶ int) int {
	return getFac(·ñ¥) / (getFac(Ôº¶) * getFac(·ñ¥-Ôº¶))
}
